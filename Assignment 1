#PYTHON CODE :-
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def insert_beginning(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node

    def insert_end(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        temp = self.head
        while temp.next:
            temp = temp.next
        temp.next = new_node

    def insert_position(self, data, pos):
        if pos == 0:
            self.insert_beginning(data)
            return
        new_node = Node(data)
        temp = self.head
        for _ in range(pos - 1):
            if temp is None:
                print("Position out of range")
                return
            temp = temp.next
        new_node.next = temp.next
        temp.next = new_node

    def display(self):
        temp = self.head
        while temp:
            print(temp.data, end=" -> ")
            temp = temp.next
        print("None")

# Example usage
ll = LinkedList()
ll.insert_end(10)
ll.insert_beginning(5)
ll.insert_end(20)
ll.insert_position(15, 2)
ll.display()


































//C CODE :-
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

int main() {
    struct Node *head = NULL, *temp, *newNode;
    int choice, data, pos, i;

    while (1) {
        printf("\n1. Insert at Beginning\n2. Insert at End\n3. Insert at Position\n4. Display\n5. Exit\nEnter choice: ");
        scanf("%d", &choice);

        if (choice == 5) break;

        switch (choice) {
            case 1: // Insert at Beginning
                printf("Enter data: ");
                scanf("%d", &data);
                newNode = malloc(sizeof(struct Node));
                newNode->data = data;
                newNode->next = head;
                head = newNode;
                break;

            case 2: // Insert at End
                printf("Enter data: ");
                scanf("%d", &data);
                newNode = malloc(sizeof(struct Node));
                newNode->data = data;
                newNode->next = NULL;
                if (head == NULL)
                    head = newNode;
                else {
                    temp = head;
                    while (temp->next != NULL) temp = temp->next;
                    temp->next = newNode;
                }
                break;

            case 3: // Insert at Position
                printf("Enter position: ");
                scanf("%d", &pos);
                printf("Enter data: ");
                scanf("%d", &data);
                if (pos == 0) {
                    newNode = malloc(sizeof(struct Node));
                    newNode->data = data;
                    newNode->next = head;
                    head = newNode;
                } else {
                    temp = head;
                    for (i = 0; i < pos - 1 && temp != NULL; i++)
                        temp = temp->next;
                    if (temp == NULL) {
                        printf("Position out of range\n");
                        break;
                    }
                    newNode = malloc(sizeof(struct Node));
                    newNode->data = data;
                    newNode->next = temp->next;
                    temp->next = newNode;
                }
                break;

            case 4: // Display
                temp = head;
                printf("Linked List: ");
                while (temp != NULL) {
                    printf("%d -> ", temp->data);
                    temp = temp->next;
                }
                printf("NULL\n");
                break;

            default:
                printf("Invalid choice\n");
        }
    }
    return 0;
}
